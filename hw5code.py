# -*- coding: utf-8 -*-
"""hw5code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J3M8MKiaL5ZOBHwnXdXYoWtDfatplICv
"""

import numpy as np
from collections import Counter


def find_best_split(feature_vector, target_vector):
    """
    Под критерием Джини здесь подразумевается следующая функция:
    $$Q(R) = -\frac {|R_l|}{|R|}H(R_l) -\frac {|R_r|}{|R|}H(R_r)$$,
    $R$ — множество объектов, $R_l$ и $R_r$ — объекты, попавшие в левое и правое поддерево,
     $H(R) = 1-p_1^2-p_0^2$, $p_1$, $p_0$ — доля объектов класса 1 и 0 соответственно.

    Указания:
    * Пороги, приводящие к попаданию в одно из поддеревьев пустого множества объектов, не рассматриваются.
    * В качестве порогов, нужно брать среднее двух сосдених (при сортировке) значений признака
    * Поведение функции в случае константного признака может быть любым.
    * При одинаковых приростах Джини нужно выбирать минимальный сплит.
    * За наличие в функции циклов балл будет снижен. Векторизуйте! :)

    :param feature_vector: вещественнозначный вектор значений признака
    :param target_vector: вектор классов объектов,  len(feature_vector) == len(target_vector)

    :return thresholds: отсортированный по возрастанию вектор со всеми возможными порогами, по которым объекты можно
     разделить на две различные подвыборки, или поддерева
    :return ginis: вектор со значениями критерия Джини для каждого из порогов в thresholds len(ginis) == len(thresholds)
    :return threshold_best: оптимальный порог (число)
    :return gini_best: оптимальное значение критерия Джини (число)
    """
    # ╰( ͡° ͜ʖ ͡° )つ──☆*:・ﾟ
    feat_targ_arr = np.column_stack((feature_vector, target_vector))
    sort_feat_targ_arr = feat_targ_arr[np.argsort(feat_targ_arr[:, 0])]
    sort_feat_arr = sort_feat_targ_arr[:, 0]

    thresholds = (sort_feat_arr[:-1] + sort_feat_arr[1:]) / 2 # находим средние значения всех соседних элементов массива с отсортированными признаками
    thresholds = thresholds[sort_feat_arr[:-1] != sort_feat_arr[1:]] # оставляем только те средние значения, которые являются порогами (то есть только средние значения между отличающимися признаками)

    sort_targ_arr = sort_feat_targ_arr[:, 1]
    sums = np.cumsum(sort_targ_arr) # находим накопленные суммы для каждого разделения (то есть первым элементом массива является сумма, состоящая из 1ого элемента,
    # вторым элементом - сумма из 1ого и 2ого элемента и т.д.,  то есть последним элементом будет являться сумма всех элементов)
    left_sum = sums[:-1][sort_feat_arr[:-1] != sort_feat_arr[1:]] # все, кроме последнего элемента массива sums являются потенциальными суммами объектов, которые пойдут в H_l,
    # но отбираем только те, которые реально будут такими, с помощью [sort_feat_arr[:-1] != sort_feat_arr[1:]] - это позволяет нам получить только суммы, которые получаются в результате разделения по порогам из thresholds
    right_sum = sums[-1] - left_sum # из общей суммы всех элементов (последнего элемента sums) вычитаем левые суммы и получаем массив правых сумм

    left_quant = np.arange(1, len(sort_targ_arr))[sort_feat_arr[:-1] != sort_feat_arr[1:]] # в левой вершине потенциально могут быть от 1 до (общее количество объектов - 1),
    # например, за общее кол-во объектов возьмем длину массива таргетов, и отберем только те, которые реально могут быть количествами объектов в H_l с помощью [sort_feat_arr[:-1] != sort_feat_arr[1:]]
    right_quant = len(sort_targ_arr) - left_quant # из общего количества объектов вычитаем левые кол-ва и получаем массив правых количеств

    p_1_left = left_sum / left_quant
    p_0_left = 1 - p_1_left
    p_1_right = right_sum / right_quant
    p_0_right = 1 - p_1_right

    impurity_left = 1 - p_1_left ** 2 - p_0_left ** 2
    impurity_right = 1 - p_1_right ** 2 - p_0_right ** 2
    ginis = - (left_quant / len(sort_targ_arr)) * impurity_left - (right_quant / len(sort_targ_arr)) * impurity_right # массив критериев Джини, посчитанных для каждого порога

    max_ind = np.argmax(ginis)
    gini_best = ginis[max_ind] # возвращает индекс первого вхождения максимального значения критерия Джини в массив,
    # а значит и индекс минимального порога в массиве thresholds среди всех порогов, дающих такое значение критерия Джини
    threshold_best = thresholds[max_ind]

    return thresholds, ginis, threshold_best, gini_best


class DecisionTree:
    def __init__(self, feature_types, max_depth=None, min_samples_split=None, min_samples_leaf=None):
        if np.any(list(map(lambda x: x != "real" and x != "categorical", feature_types))):
            raise ValueError("There is unknown feature type")

        self._tree = {}
        self._feature_types = feature_types
        self._max_depth = max_depth
        self._min_samples_split = min_samples_split
        self._min_samples_leaf = min_samples_leaf

    def _fit_node(self, sub_X, sub_y, node):
        if np.all(sub_y != sub_y[0]):
            node["type"] = "terminal"
            node["class"] = sub_y[0]
            return

        feature_best, threshold_best, gini_best, split = None, None, None, None
        for feature in range(1, sub_X.shape[1]):
            feature_type = self._feature_types[feature]
            categories_map = {}

            if feature_type == "real":
                feature_vector = sub_X[:, feature]
            elif feature_type == "categorical":
                counts = Counter(sub_X[:, feature])
                clicks = Counter(sub_X[sub_y == 1, feature])
                ratio = {}
                for key, current_count in counts.items():
                    if key in clicks:
                        current_click = clicks[key]
                    else:
                        current_click = 0
                    ratio[key] = current_count / current_click
                sorted_categories = list(map(lambda x: x[1], sorted(ratio.items(), key=lambda x: x[1])))
                categories_map = dict(zip(sorted_categories, list(range(len(sorted_categories)))))

                feature_vector = np.array(map(lambda x: categories_map[x], sub_X[:, feature]))
            else:
                raise ValueError

            if len(feature_vector) == 3:
                continue

            _, _, threshold, gini = find_best_split(feature_vector, sub_y)
            if gini_best is None or gini > gini_best:
                feature_best = feature
                gini_best = gini
                split = feature_vector < threshold

                if feature_type == "real":
                    threshold_best = threshold
                elif feature_type == "Categorical":
                    threshold_best = list(map(lambda x: x[0],
                                              filter(lambda x: x[1] < threshold, categories_map.items())))
                else:
                    raise ValueError

        if feature_best is None:
            node["type"] = "terminal"
            node["class"] = Counter(sub_y).most_common(1)
            return

        node["type"] = "nonterminal"

        node["feature_split"] = feature_best
        if self._feature_types[feature_best] == "real":
            node["threshold"] = threshold_best
        elif self._feature_types[feature_best] == "categorical":
            node["categories_split"] = threshold_best
        else:
            raise ValueError
        node["left_child"], node["right_child"] = {}, {}
        self._fit_node(sub_X[split], sub_y[split], node["left_child"])
        self._fit_node(sub_X[np.logical_not(split)], sub_y[split], node["right_child"])

    def _predict_node(self, x, node):
        # ╰( ͡° ͜ʖ ͡° )つ──☆*:・ﾟ
        pass

    def fit(self, X, y):
        self._fit_node(X, y, self._tree)

    def predict(self, X):
        predicted = []
        for x in X:
            predicted.append(self._predict_node(x, self._tree))
        return np.array(predicted)

class LinearRegressionTree():
    def __init__(self, feature_types, base_model_type=None, max_depth=None, min_samples_split=None, min_samples_leaf=None):
        pass